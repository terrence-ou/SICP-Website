---
import { getSections } from "../utils/toc";

interface Props {
  range: string;
  currChapter: string;
}

interface organizedPostsType {
  [key: string]: { title: string; posts: (typeof posts)[0][] };
}

const posts = await Astro.glob("../pages/contents/*.md");
const { range, currChapter } = Astro.props; // Get the range of exercises in the pose
const organizedPosts: organizedPostsType = {};

const sections = getSections(range);

posts.forEach((post) => {
  if (!organizedPosts[post.frontmatter.chapter]) {
    organizedPosts[post.frontmatter.chapter] = {
      title: `${post.frontmatter.chapter} ${post.frontmatter.chapterTitle}`,
      posts: [post],
    };
  } else {
    organizedPosts[post.frontmatter.chapter].posts.push(post);
  }
});
---

<div class="relative col-span-1 overflow-visible text-sm">
  <div
    id="contents-list"
    class="flex flex-col tracking-tighter fixed opacity-50 hover:opacity-100 duration-100"
  >
    {
      Object.values(organizedPosts).map((postObject) => {
        return (
          <>
            <h4>{postObject.title}</h4>
            {postObject.posts.map((post) => {
              return (
                <a href={post.url}>
                  {post.frontmatter.chapter}.{post.frontmatter.section}{" "}
                  {post.frontmatter.sectionTitle}
                </a>
              );
            })}
          </>
        );
      })
    }
    <div>
      <ul class="box-border mt-10 w-[70%] flex flex-wrap gap-2">
        {
          sections.map((index) => {
            return (
              <li class="w-11 rounded-md text-center bg-dark-sky/60 hover:bg-dark-sky">
                <a
                  class="text-white hover:no-underline"
                  href={`#exercise-${currChapter}${index}`}
                >{`${currChapter}.${index}`}</a>
              </li>
            );
          })
        }
      </ul>
    </div>
  </div>
</div>
